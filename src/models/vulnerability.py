from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import Optional, Dict, Any

class Severity(Enum):
    """Vulnerability severity levels."""
    CRITICAL = ("CRITICAL", 4)
    HIGH = ("HIGH", 3)
    MEDIUM = ("MEDIUM", 2)
    LOW = ("LOW", 1)
    INFO = ("INFO", 0)
    
    def __init__(self, label: str, level: int):
        self._label = label
        self._level = level
        
    @property
    def value(self) -> str:
        return self._label
        
    @property
    def level(self) -> int:
        return self._level

@dataclass
class CodeLocation:
    """Represents a location in the code where a vulnerability was found."""
    file_path: Path
    start_line: int
    end_line: int
    snippet: str
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the code location to a dictionary format."""
        return {
            "file_path": str(self.file_path),
            "start_line": self.start_line,
            "end_line": self.end_line,
            "snippet": self.snippet
        }

@dataclass
class Vulnerability:
    """Represents a security vulnerability found in the code."""
    title: str
    description: str
    severity: Severity
    location: CodeLocation
    proof_of_concept: Optional[str] = None  # Markdown-formatted exploitation guide
    fix: Optional[str] = None  # Markdown-formatted fix instructions
    cwe_id: Optional[str] = None
    recommendation: Optional[str] = None
    confidence: float = 1.0
    false_positive: bool = False
    
    def to_json_dict(self) -> Dict[str, Any]:
        """Convert the vulnerability to a JSON-friendly dictionary format.
        This format excludes markdown-formatted fields like proof_of_concept and fix,
        which are intended for the markdown report only."""
        return {
            "title": self.title,
            "description": self.description,
            "severity": self.severity.value,
            "location": self.location.to_dict(),
            "cwe_id": self.cwe_id,
            "confidence": self.confidence,
            "false_positive": self.false_positive
        }
    
    def to_full_dict(self) -> Dict[str, Any]:
        """Convert the vulnerability to a complete dictionary format including all fields.
        This is mainly used for internal purposes and debugging."""
        return {
            **self.to_json_dict(),
            "proof_of_concept": self.proof_of_concept,
            "fix": self.fix,
            "recommendation": self.recommendation
        }
    
    @property
    def cwe_url(self) -> Optional[str]:
        """Get the URL for the CWE entry if a CWE ID is available."""
        if not self.cwe_id:
            return None
        cwe_number = self.cwe_id.replace('CWE-', '')
        return f"https://cwe.mitre.org/data/definitions/{cwe_number}.html"
    
    @property
    def has_markdown_content(self) -> bool:
        """Check if the vulnerability has any markdown-formatted content."""
        return bool(self.proof_of_concept or self.fix or self.recommendation) 